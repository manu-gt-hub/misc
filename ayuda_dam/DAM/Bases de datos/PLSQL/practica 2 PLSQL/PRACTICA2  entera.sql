

   /**********************************
   *    PRACTICA Nº2 DE PL-SQL       *
   *    MANUEL GUTIERREZ TORRERO     *
   *    1º DAM                       *
   ***********************************
   */
   
/*CREACION DE TABLAS*/
/*
DROP TABLE ARTICULO CASCADE CONSTRAINTS;
DROP TABLE USUARIO CASCADE CONSTRAINTS;
DROP TABLE PROPUESTA CASCADE CONSTRAINTS;
DROP TABLE ARTPRO CASCADE CONSTRAINTS;
DROP TABLE PEDIDO CASCADE CONSTRAINTS;
DROP TABLE ARTPED CASCADE CONSTRAINTS;
DROP TABLE ERRORES CASCADE CONSTRAINTS;
DROP SEQUENCE S1;
DROP SEQUENCE SEC_ERROR;
DROP SEQUENCE SEC_PEDIDO;
DROP TYPE VARRAY_USU;
DROP TABLE TOPVEN CASCADE CONSTRAINTS;

CREATE TABLE ARTICULO (
  CODART VARCHAR2(5),
  NOMART VARCHAR2(20),
  PRECIO NUMBER(6,2),
  IVA NUMBER(6,2),
  CONSTRAINT PK_ARTICULO PRIMARY KEY (CODART));

CREATE TABLE USUARIO (
  USR VARCHAR2(10),
  PWD VARCHAR2(10),
  PUNTOS NUMBER(3),
  CONSTRAINT PK_USUARIO PRIMARY KEY (USR));

CREATE TABlE PROPUESTA (
  CODPRO VARCHAR2(11),
  USR VARCHAR2(10),
  PRECIO NUMBER(6,2),
  IVA NUMBER(6,2),
  TOTAL NUMBER(6,2),
  FECHA DATE,
  VALIDADA NUMBER(1),
  CONSTRAINT PK_PROPUESTA PRIMARY KEY (CODPRO),
  CONSTRAINT FK_PROPUESTA_USUARIO FOREIGN KEY (USR) REFERENCES USUARIO (USR));


CREATE TABLE ARTPRO (
  CODART VARCHAR2(5),
  CODPRO VARCHAR2(11),
  PROCESADO NUMBER(1),
  CONSTRAINT PK_ARTPRO PRIMARY KEY (CODART,CODPRO),
  CONSTRAINT FK_ARTPRO_ARTICULO FOREIGN KEY (CODART) REFERENCES ARTICULO (CODART),
  CONSTRAINT FK_ARTPRO_PROPUESTA FOREIGN KEY (CODPRO) REFERENCES PROPUESTA (CODPRO));


  
CREATE TABLE PEDIDO (
  CODPED NUMBER(4),
  USR VARCHAR2(10),
  PRECIO NUMBER(6,2),
  IVA NUMBER(6,2),
  TOTAL NUMBER(6,2),
  FECHA DATE,
  VALIDADA NUMBER(1),
  CONSTRAINT PK_PEDIDO PRIMARY KEY (CODPED),
  CONSTRAINT FK_PEDIDO_USUARIO FOREIGN KEY (USR) REFERENCES USUARIO (USR));
  
CREATE TABLE ARTPED (
  CODPED NUMBER(4),
  CODART VARCHAR2(5),
  CONSTRAINT PK_ARTPED PRIMARY KEY (CODPED,CODART),
  CONSTRAINT FK_ARTPED_PEDIDO FOREIGN KEY (CODPED) REFERENCES PEDIDO (CODPED),
  CONSTRAINT FK_ARTPED_ARTICULO FOREIGN KEY (CODART) REFERENCES ARTICULO (CODART));

CREATE TABLE ERRORES(
   CODERROR NUMBER(4),
   FECERROR DATE,
   USR VARCHAR2(10),
   CODPRO VARCHAR2(11),
   CANTART NUMBER(3),
   PRECIOTOT NUMBER(5,2),
   IVA NUMBER(3,2),
   FECPRO DATE,
   CODPED NUMBER(4),
   CANTARTPED NUMBER(3),
   PRECIOTOTART NUMBER(5,2),
   IVAART NUMBER(3,2),
   FECPED DATE,
   CONSTRAINT PK_ERRORES PRIMARY KEY (CODERROR),
   CONSTRAINT FK_ERRORES_USUARIO FOREIGN KEY (USR) REFERENCES USUARIO (USR),
   CONSTRAINT FK_ERRORES_PROPUESTA FOREIGN KEY (CODPRO) REFERENCES PROPUESTA (CODPRO),
   CONSTRAINT FK_ERRORES_PEDIDO FOREIGN KEY (CODPED) REFERENCES PEDIDO (CODPED)
);
CREATE SEQUENCE S1
   MINVALUE 1
   MAXVALUE 999
   START WITH 1
   INCREMENT BY 1;
   
CREATE SEQUENCE SEC_ERROR
   MINVALUE 1
   MAXVALUE 999
   START WITH 1
   INCREMENT BY 1;
   
CREATE SEQUENCE SEC_PEDIDO
   MINVALUE 1
   MAXVALUE 999
   START WITH 1
   INCREMENT BY 1;
   
CREATE OR REPLACE TYPE VARRAY_USU IS VARRAY(3) OF VARCHAR2(10);

CREATE TABLE TOPVEN(
  CODIGO VARCHAR2(8),
  USUARIOS  VARRAY_USU,
  PROCESADO NUMBER(1),
  CONSTRAINT PK_TOPVEN PRIMARY KEY (CODIGO));   

--------------------------------------------
INSERT INTO ARTICULO (CODART,NOMART,PRECIO,IVA) VALUES ('00001','ART1',0001.01,0.01);
INSERT INTO ARTICULO (CODART,NOMART,PRECIO,IVA) VALUES ('00002','ART2',0002.02,0.02);
INSERT INTO ARTICULO (CODART,NOMART,PRECIO,IVA) VALUES ('00003','ART3',0003.03,0.03);
INSERT INTO ARTICULO (CODART,NOMART,PRECIO,IVA) VALUES ('00004','ART4',0004.04,0.04);
INSERT INTO ARTICULO (CODART,NOMART,PRECIO,IVA) VALUES ('00005','ART5',0005.05,0.05);
INSERT INTO ARTICULO (CODART,NOMART,PRECIO,IVA) VALUES ('00006','ART6',0006.06,0.06);
INSERT INTO ARTICULO (CODART,NOMART,PRECIO,IVA) VALUES ('00007','ART7',0007.07,0.07);
INSERT INTO ARTICULO (CODART,NOMART,PRECIO,IVA) VALUES ('00008','ART8',0008.08,0.08);
INSERT INTO ARTICULO (CODART,NOMART,PRECIO,IVA) VALUES ('00009','ART9',0009.09,0.09);
COMMIT;


INSERT INTO USUARIO (USR,PWD,PUNTOS) VALUES ('USU1','USU1',0);
INSERT INTO USUARIO (USR,PWD,PUNTOS) VALUES ('USU2','USU2',0);
INSERT INTO USUARIO (USR,PWD,PUNTOS) VALUES ('USU3','USU3',0);
INSERT INTO USUARIO (USR,PWD,PUNTOS) VALUES ('USU4','USU4',0);
INSERT INTO USUARIO (USR,PWD,PUNTOS) VALUES ('USU5','USU5',0);
COMMIT;


INSERT INTO PROPUESTA (CODPRO,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES ('00125042013','USU1',0001.01,0.01,1.02,'25/04/2013',1);
INSERT INTO PROPUESTA (CODPRO,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES ('00225042013','USU2',0006.06,0.06,6.12,'25/04/2013',0);
INSERT INTO PROPUESTA (CODPRO,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES ('00325042013','USU2',0008.08,0.08,8.16,'25/04/2013',0);
INSERT INTO PROPUESTA (CODPRO,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES ('00425042013','USU1',0011.01,0.11,11.12,'25/04/2013',0);
INSERT INTO PROPUESTA (CODPRO,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES ('00525042013','USU3',0001.01,0.01,1.02,'25/04/2013',1);
INSERT INTO PROPUESTA (CODPRO,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES ('00625042013','USU4',0002.02,0.02,2.04,'25/04/2013',1);
COMMIT;


INSERT INTO ARTPRO (CODART,CODPRO,PROCESADO) VALUES ('00001','00125042013',1);
INSERT INTO ARTPRO (CODART,CODPRO,PROCESADO) VALUES ('00001','00225042013',0);
INSERT INTO ARTPRO (CODART,CODPRO,PROCESADO) VALUES ('00002','00225042013',0);
INSERT INTO ARTPRO (CODART,CODPRO,PROCESADO) VALUES ('00003','00225042013',0);
INSERT INTO ARTPRO (CODART,CODPRO,PROCESADO) VALUES ('00001','00325042013',0);
INSERT INTO ARTPRO (CODART,CODPRO,PROCESADO) VALUES ('00007','00325042013',0);
INSERT INTO ARTPRO (CODART,CODPRO,PROCESADO) VALUES ('00003','00425042013',0);
INSERT INTO ARTPRO (CODART,CODPRO,PROCESADO) VALUES ('00008','00425042013',0);
INSERT INTO ARTPRO (CODART,CODPRO,PROCESADO) VALUES ('00001','00525042013',1);
INSERT INTO ARTPRO (CODART,CODPRO,PROCESADO) VALUES ('00002','00625042013',1);
COMMIT;


*/
/*BLOQUE ANONIMO

PSEUDOCODIGO

OBJETIVO: PROCESAR TODAS LAS PROPUESTAS PENDIENTES DE CADA USUARIO Y SUS ARTICULOS
          HACIENDO FINALMENTE UN INSERT EN LA TABLA PEDIDO POR CADA PROPUESTA PROCESADA
          Y EN ARTPED POR CADA PEDIDO PROCESADOR.
          
INICIO
OBTENER EL NumUsu con propuestas pendientes.
	SI(NumUsu>0)ENTONCES
	|	OBTENER LA LISTA DE USUARIOS CON PROPUESTAS PENDIENTES(LUSU)
	|	MIENTRAS (LUSU NO VACIO)HACER
	|      | 	OBTENER LISTA PROPUESTAS PENDIENTES (LPRO) PARA ESE USUARIO
	|      |	MIENTRAS(LPRO NO VACIO)HACER
	|      |       |	OBTENER TODOS LOS ARTICULOS DE ESA PROPUESTA
	|      |       |	CALCULAR PRECIO TOTAL
	|      |       |	CALCULAR IVA TOTA
	|      |       |	OBTENER FECHA PROPUESTA
	|      |       |	INSERTAR EN PEDIDO TOTALES 
	|      |       |	INSERTAR EN ARTPED LOS PARCIALES
	|      |	FIN-MIENTRAS
	|	FIN-MIENTRAS
	SI-NO
	|	MOSTRAR "NO SE PROCESARON REGISTROS"
	FIN-SI
FIN
			
tablas:
*/

/*  ***    EJERCICIO 1   ***  */

SET SERVEROUTPUT ON FORMAT WORD_WRAPPED;
DECLARE
  /*DECLARACION DE TIPOS*/
  TYPE TIPO_USU IS TABLE OF USUARIO.USR%TYPE INDEX BY BINARY_INTEGER;
  TYPE TIPO_PRO IS TABLE OF PROPUESTA.CODPRO%TYPE INDEX BY BINARY_INTEGER;
  TYPE TIPO_ART IS TABLE OF ARTICULO%ROWTYPE INDEX BY BINARY_INTEGER;
  /*DECLARACION DE ESTRUCTURAS DINAMICAS (LISTAS)*/
	LISTA_USU TIPO_USU;  --AQUI GUARDAREMOS LOS USUARIOS QUE TENGAN PROPUESTAS PENDIENTES
  LISTA_PRO TIPO_PRO;  --AQUI GUARDAREMOS LAS PROPUESTAS PENDIENTES
  LISTA_ART TIPO_ART;  --AQUI GUARDAREMOS LOS ARTICULOS QUE NO HAN SIDO AUN PROCESADOS
  /*DECLARACION DE INDICES*/
  USU BINARY_INTEGER;	--VARIABLE INDICE DE LA LISTA USUARIOS
  PRO BINARY_INTEGER; --VARIABLE INDICE DE LA LISTA PROPUESTAS
  ART BINARY_INTEGER; --VARIABLE INDICE DE LA LISTA ARTICULOS
  /*DECLARACION DE VARIABLES*/
	CONT_USU NUMBER(2); --CONTADOR DE USUARIOS CON PROPUESTAS PENDIENTES
  CONT_PRO NUMBER(2); --CONTADOR DE PROPUESTAS PENDIENTES
  CONT_ART NUMBER(2); --CONTADOR DE ARTICULOS
  PRECIO NUMBER(5,2):=0;  --ACUMULADOR DE PRECIOS POR PROPUESTA
  PRECIO_PRO NUMBER(5,2):=0;  --AQUI GUARDAREMOS EL PRECIO TOTAL DE UNA PROPUESTA SIN IVA
  TOTAL NUMBER(5,2):=0;  --AQUI GUARDAREMOS EL PRECIO TOTAL DE UNA PROPUESTA CON IVA
  TOTAL_PRO NUMBER(5,2):=0;
  COD_PED NUMBER(3):=0;
  IVA PROPUESTA.IVA%TYPE:=0;
  FECHA DATE;
  HAY_ERROR BOOLEAN:=FALSE;
  CODERROR NUMBER(3):=0;
  FECERROR DATE;
  FECPRO DATE;
  

BEGIN  --INICIO BLOQUE ANONIMO
  
  /*  APARTADO 'A'*/
  
  /*CONTEO DEL NUMERO DE USUARIOS
  CON PROPUESTAS PENDIENTES DE 
  PROCESAR*/
                                  
  SELECT COUNT(*) INTO CONT_USU  
  FROM USUARIO WHERE USR IN (SELECT USR FROM PROPUESTA
                              WHERE CODPRO IN (SELECT CODPRO 
                                              FROM ARTPRO 
                                              WHERE PROCESADO=0
                                              GROUP BY CODPRO)
  GROUP BY USR);
  
	IF(CONT_USU>0)THEN --SI HAY ALGUN USUARIO CON PROPUESTAS PENDIENTES
  
   /*RELLENAMOS LA LISTA_USU CON LOS USUARIOS QUE TIENEN PROPUESTAS PENDIENTES*/
		FOR USU IN 1..CONT_USU LOOP  --FOR CARGA USUARIOS
      SELECT USR INTO LISTA_USU(USU)
      FROM	(SELECT ROWNUM AS NUM,USR   
             FROM (SELECT USR FROM PROPUESTA
                                     WHERE CODPRO IN (SELECT CODPRO 
                                                FROM ARTPRO 
                                                WHERE PROCESADO=0
                                                GROUP BY CODPRO)
          GROUP BY USR))
       WHERE NUM=USU;

		END LOOP;--FIN FOR CARGA USUARIOS
    
    /*  FIN APARTADO 'A'   EJERCICIO1 */

    /* INICIO APARTADO 'B' EJERCICIO1 */
    FOR USU IN 1..CONT_USU LOOP  --RECORREMOS FON EL FOR LA LISTA DE USUARIOS
                                 --CON PROPUESTAS PENDIENTES
        HAY_ERROR:=FALSE;
        DBMS_OUTPUT.PUT_LINE('USUARIO: '||LISTA_USU(USU));
        /*SELECCIONAMOS EL NUMERO DE PROPUESTAS PENDIENTES PARA UN USUARIO*/
        
        SELECT COUNT(*) INTO CONT_PRO 
        FROM PROPUESTA WHERE (VALIDADA=0) AND (USR=LISTA_USU(USU));
        
        IF(LISTA_PRO.COUNT>0) THEN
           LISTA_PRO.DELETE;
        END IF;

        /*RELLENAMOS LA ESTRUCTURA DINAMICA DE PROPUESTAS CON LAS PROPUESTAS
        PENDIENTES PARA ESTE USUARIO*/
        FOR PRO IN 1..CONT_PRO LOOP  --CARGAMOS LA LISTA DE PROPUESTAS POR CADA USUARIO
          
          /*INTRODUCIMOS LAS PROPUESTAS SIN PROCESAR EN LA LISTA DE PROPUESTAS*/
           SELECT CODPRO INTO LISTA_PRO(PRO)
           FROM (SELECT ROWNUM AS NUM,CODPRO FROM PROPUESTA
                 WHERE USR=LISTA_USU(USU) AND (VALIDADA=0))
           WHERE NUM=PRO;
           
        END LOOP;--FIN CARGA DE PROPUESTAS
        
          
        FOR PRO IN 1..CONT_PRO LOOP  --FOR RECORRER PROPUESTAS
          /*CONTAMOS EL NUMERO DE ARTICULOS POR CADA PROPUESTA*/  
          DBMS_OUTPUT.PUT_LINE('  PROPUESTA: '||LISTA_PRO(PRO));
          SELECT COUNT(*) INTO CONT_ART
          FROM ARTPRO WHERE CODPRO=LISTA_PRO(PRO) AND PROCESADO=0;
          
          IF (LISTA_ART.COUNT>0) THEN
             LISTA_ART.DELETE;
          END IF;
          
          FOR ART IN 1..CONT_ART LOOP  --CARGAMOS LA LISTA DE ARTICULOS POR CADA PROPUESTA
             SELECT CODART,PRECIO,IVA INTO LISTA_ART(ART).CODART,LISTA_ART(ART).PRECIO,LISTA_ART(ART).IVA
             FROM (SELECT ROWNUM AS NUM,CODART,PRECIO,IVA FROM ARTICULO
                   WHERE CODART IN(SELECT CODART FROM ARTPRO WHERE CODPRO=LISTA_PRO(PRO) AND PROCESADO=0))
             WHERE NUM=ART;

          END LOOP; --FIN FOR CARGA ARTICULOS  
          FOR ART IN 1..CONT_ART LOOP --FOR RECORRE ARTICULOS
            DBMS_OUTPUT.PUT_LINE('    CODART: '||LISTA_ART(ART).CODART||'  '||LISTA_ART(ART).PRECIO);
          
            PRECIO:=PRECIO+LISTA_ART(ART).PRECIO;   --SUMAMOS EL PRECIO DEL ARTICULO AL 
                                                    --ACUMULADOR DE LA PROPUESTA ENTERA
            
          END LOOP; --FIN RECORRER ARTICULOS
            SELECT PRECIO INTO PRECIO_PRO FROM PROPUESTA WHERE CODPRO=LISTA_PRO(PRO);
            SELECT TOTAL INTO TOTAL_PRO FROM PROPUESTA WHERE CODPRO=LISTA_PRO(PRO);
            SELECT IVA INTO IVA FROM PROPUESTA WHERE CODPRO=LISTA_PRO(PRO);
            DBMS_OUTPUT.PUT_LINE('    PRECIO: '||PRECIO);  --VISUALIZAMOS EL PRECIO TOTAL DE 
                                                            --LA PROPUESTA
	 /*FIN DE APARTADO 'B' EJERCICIO 1*/	
  /* INICIO APARTADO C EJERCICIO 1*/	
             UPDATE ARTPRO SET PROCESADO=1 WHERE CODPRO=LISTA_PRO(PRO);
             SELECT SEC_PEDIDO.NEXTVAL INTO COD_PED FROM DUAL;
             SELECT SYSDATE INTO FECHA FROM DUAL;
             COMMIT;
             TOTAL:=PRECIO+IVA;
             INSERT INTO PEDIDO (CODPED,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES 
             (COD_PED,LISTA_USU(USU),PRECIO,IVA,TOTAL,FECHA,0);
             COMMIT;
             DBMS_OUTPUT.PUT_LINE(' *** PEDIDO REALIZADO ***');
             IF(PRECIO=PRECIO_PRO) THEN  --SI LA SUMA DE TODOS LOS PRECIOS COINCIDEN CON EL
                                         --PRECIO DE LA PROPUESTA
               
              
              DBMS_OUTPUT.PUT_LINE('  LOS PRECIOS COINCIDEN PRECIO PROP.: '||PRECIO||' PRECIO+IVA: '||TOTAL);
              
              IF(TOTAL=TOTAL_PRO) THEN --SI COINCIDEN LOS TOTALES
              
                 IF(IVA=(TOTAL-PRECIO)) THEN
                 
                   DBMS_OUTPUT.PUT_LINE('  LOS TOTALES COINCIDEN TOTAL: '||TOTAL||' TOTAL: '||TOTAL_PRO);
                   DBMS_OUTPUT.PUT_LINE(' *** PEDIDO VALIDADO *** ');
                   UPDATE PEDIDO SET VALIDADA=1 WHERE CODPED=COD_PED;
                   UPDATE PROPUESTA SET VALIDADA=1 WHERE CODPRO=LISTA_PRO(PRO);
                 ELSE  --SI NO COINCIDEN LOS IVA
                   DBMS_OUTPUT.PUT_LINE('  LOS IVAS NO COINCIDEN TOTAL: '||IVA||' TOTAL: '||(TOTAL-PRECIO));
                   DBMS_OUTPUT.PUT_LINE('  !!! PEDIDO NO REALIZADO !!! ');
                   HAY_ERROR:=TRUE;
                 END IF;
                 ELSE --SI NO COINCIDEN LOS TOTALES
                   DBMS_OUTPUT.PUT_LINE('  LOS TOTALES NO COINCIDEN TOTAL: '||TOTAL||' TOTAL: '||TOTAL_PRO);
                   DBMS_OUTPUT.PUT_LINE('  !!! PEDIDO NO REALIZADO !!! ');
                   HAY_ERROR:=TRUE;

                 END IF;

               ELSE --SI NO COINCIDEN LOS PRECIOS
                  DBMS_OUTPUT.PUT_LINE('  LOS PRECIOS NO COINCIDEN '||' ('||PRECIO_PRO||')');
                  DBMS_OUTPUT.PUT_LINE('  !!! PEDIDO NO REALIZADO !!! ');
                  HAY_ERROR:=TRUE;
               END IF;
               
               IF(HAY_ERROR=TRUE)THEN
                   SELECT SEC_ERROR.NEXTVAL INTO CODERROR FROM DUAL; 
                   DBMS_OUTPUT.PUT_LINE('ERROR 1');
                   SELECT SYSDATE INTO FECERROR FROM DUAL;
                   SELECT FECHA INTO FECPRO FROM PROPUESTA WHERE CODPRO=LISTA_PRO(PRO);
                   SELECT S1.NEXTVAL INTO COD_PED FROM DUAL; 
                   DBMS_OUTPUT.PUT_LINE('ERROR 2');
                   INSERT INTO ERRORES (CODERROR,FECERROR,USR,CODPRO,CANTART,PRECIOTOT,IVA,FECPRO,CODPED,CANTARTPED,PRECIOTOTART,IVAART,FECPED)
                   VALUES 
                   (CODERROR,FECERROR,LISTA_USU(USU),LISTA_PRO(PRO),CONT_ART,TOTAL_PRO,IVA,FECPRO,COD_PED,CONT_ART,PRECIO_PRO,IVA,FECERROR);
                   COMMIT;
                   DBMS_OUTPUT.PUT_LINE('ERROR INSERTADO');
                   HAY_ERROR:=FALSE;
                   
               END IF;
               PRECIO:=0;  --PONEMOS EL SUMATORIO DE PRECIO POR CADA PROPUESTA A CERO
               TOTAL:=0;
      END LOOP;--FIN FOR RECORRE PROPUESTAS
    /*FIN DE APARTADO 'C' EJERCICIO 1*/        
     
    END LOOP;  --FIN FOR RECORRE USUARIOS
    --SELECT * FROM PROPUESTA;
    --SELECT * FROM PEDIDO;
    --SELECT * FROM ERRORES;
    --SELECT * FROM ARTPRO;
    
  ELSE
    DBMS_OUTPUT.PUT_LINE('NO HAY USUARIOS CON PROPUESTAS PENDIENTES');
  END IF;
END; --FIN BLOQUE ANONIMO
/

/* ***   EJERCICIO 2 ***  */
/*
INSERT INTO PEDIDO (CODPED,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES (4,'USU3',20.4,0.5,20.9,'16/03/13',1);
INSERT INTO PEDIDO (CODPED,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES (5,'USU4',100,0.5,100.5,'17/03/13',1);
INSERT INTO PEDIDO (CODPED,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES (6,'USU5',150,0.5,150.5,'17/03/13',1);
INSERT INTO PEDIDO (CODPED,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES (7,'USU5',150,0.5,9,'17/03/13',1);
INSERT INTO PEDIDO (CODPED,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES (8,'USU1',7,0.5,7.5,'17/03/13',1);
*/


SET SERVEROUTPUT ON FORMAT WORD_WRAPPED;
DECLARE  --DECLARACION 
  --DECLARACION DE TIPOS DE LISTAS DINAMICAS
  TYPE TIPO_USU IS TABLE OF USUARIO.USR%TYPE INDEX BY BINARY_INTEGER;
  TYPE TIPO_TOT IS TABLE OF PEDIDO.TOTAL%TYPE INDEX BY BINARY_INTEGER;
  --DECLARACION VARRAY PARA GUARDAR LOS 3 USUARIOS QUE MAS PEDIDOS HAN REALIZADO
  LISTA_TOPVEN VARRAY_USU;
  --DECLARACION DE LISTAS DINAMICAS
  LISTA_USU TIPO_USU;
  LISTA_TOT TIPO_TOT;
  --DECLARACION DE VARIABLES
  CONT_USU NUMBER(2);
  CONT_PED NUMBER(2);
  USU NUMBER(2);
  TOT NUMBER(2):=1;
  N NUMBER(1):=0;
  M NUMBER(1):=0;
  IND NUMBER(1):=0;
  MAYOR_TOT PEDIDO.TOTAL%TYPE;
  MAYOR_USU PEDIDO.USR%TYPE;
  AUX_TOT PEDIDO.TOTAL%TYPE;
  AUX_USU PEDIDO.USR%TYPE;
  VARRAY_AUX VARRAY_USU:=VARRAY_USU('','','');
  CODIGO VARCHAR(8);
  CONT_TOP NUMBER(2):=0;
  FECHA DATE;
  FECHA_CAD VARCHAR2(8);
BEGIN  --INICIO BLOQUE ANONIMO
   CONT_TOP:=0;
   SELECT ADD_MONTHS(SYSDATE,-1) INTO FECHA FROM DUAL;
   SELECT TO_CHAR(FECHA) INTO FECHA_CAD FROM DUAL;
   FECHA_CAD:=SUBSTR(FECHA_CAD,4,10);
   --DBMS_OUTPUT.PUT_LINE(FECHA_CAD);
   SELECT COUNT(*) INTO CONT_TOP FROM TOPVEN WHERE (CODIGO=FECHA_CAD);
   --DBMS_OUTPUT.PUT_LINE(CONT_TOP);

IF(CONT_TOP=0)  THEN  
   SELECT COUNT(*)  INTO CONT_USU
   FROM (SELECT USR FROM PEDIDO WHERE (VALIDADA=1) GROUP BY USR);

   IF(CONT_USU>0) THEN
  
      FOR USU IN 1..CONT_USU LOOP --FOR CARGA USUARIOS
            
        SELECT USR INTO LISTA_USU(USU)
        FROM (SELECT ROWNUM AS NUM,USR FROM 
             (SELECT USR FROM PEDIDO WHERE VALIDADA=1
              GROUP BY USR))
        WHERE NUM=USU; 
      
      END LOOP;
      TOT:=1;
      FOR USU IN 1..CONT_USU LOOP --FOR RECORRE USUARIOS
            --DBMS_OUTPUT.PUT_LINE(LISTA_USU(USU));
            
            SELECT COUNT(*) INTO CONT_PED
            FROM (SELECT CODPED FROM PEDIDO WHERE (VALIDADA=1) AND USR=LISTA_USU(USU));

            IF(CONT_PED>0) THEN
            
                  SELECT SUM(TOTAL) INTO LISTA_TOT(TOT) FROM PEDIDO WHERE (VALIDADA=1 AND USR=LISTA_USU(USU));
                  --DBMS_OUTPUT.PUT_LINE(LISTA_TOT(TOT));
                  TOT:=TOT+1;
              
            END IF;
     
      END LOOP;--FOR RECORRE USUARIOS
      /*
      DBMS_OUTPUT.PUT_LINE('SUMATORIOS');
      FOR N IN 1..TOT-1 LOOP
         DBMS_OUTPUT.PUT_LINE('USUS: '||LISTA_USU(N));
         DBMS_OUTPUT.PUT_LINE('SUM: '||LISTA_TOT(N));
      END LOOP;
      */
      
      FOR N IN 1..TOT-1 LOOP
         MAYOR_TOT:=0;
         FOR M IN N..TOT-1 LOOP
         
           IF(LISTA_TOT(M)>MAYOR_TOT) THEN
              MAYOR_TOT:=LISTA_TOT(M);
              MAYOR_USU:=LISTA_USU(M);
              IND:=M;
           END IF;
           
         END LOOP;
         AUX_TOT:=LISTA_TOT(N);
         AUX_USU:=LISTA_USU(N);
         LISTA_USU(N):=MAYOR_USU;
         LISTA_TOT(N):=MAYOR_TOT;
         LISTA_TOT(IND):=AUX_TOT;
         LISTA_USU(IND):=AUX_USU;
         
      END LOOP;
      /*
      DBMS_OUTPUT.PUT_LINE('SUMATORIOS ORDENADOS');
      FOR N IN 1..TOT-1 LOOP
         DBMS_OUTPUT.PUT_LINE('USUS: '||LISTA_USU(N));
         DBMS_OUTPUT.PUT_LINE('SUM: '||LISTA_TOT(N));
      END LOOP;
      */
     /*RELLENAR VARRAY CON LOS USUARIOS CORRECTOS*/
     VARRAY_AUX(1):=LISTA_USU(1);
     VARRAY_AUX(2):=LISTA_USU(2);
     VARRAY_AUX(3):=LISTA_USU(3);
    
     SELECT FECHA_CAD INTO CODIGO FROM DUAL; 
     INSERT INTO TOPVEN (CODIGO,USUARIOS,PROCESADO) VALUES (CODIGO,VARRAY_AUX,1);
     DBMS_OUTPUT.PUT_LINE(' *** TOPVEN REALIZADO *** ');
   END IF;


ELSE
    DBMS_OUTPUT.PUT_LINE(' *** YA SE PROCESO EL TOP VENTAS PARA ESTE MES *** ');
END IF;
END;
/
--FIN BLOQUE ANONIMO

