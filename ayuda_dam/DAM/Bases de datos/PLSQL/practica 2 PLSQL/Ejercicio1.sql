

/*  ***    EJERCICIO 1   ***  */

SET SERVEROUTPUT ON FORMAT WORD_WRAPPED;
DECLARE
  /*DECLARACION DE TIPOS*/
  TYPE TIPO_USU IS TABLE OF USUARIO.USR%TYPE INDEX BY BINARY_INTEGER;
  TYPE TIPO_PRO IS TABLE OF PROPUESTA.CODPRO%TYPE INDEX BY BINARY_INTEGER;
  TYPE TIPO_ART IS TABLE OF ARTICULO%ROWTYPE INDEX BY BINARY_INTEGER;
  /*DECLARACION DE ESTRUCTURAS DINAMICAS (LISTAS)*/
	LISTA_USU TIPO_USU;  --AQUI GUARDAREMOS LOS USUARIOS QUE TENGAN PROPUESTAS PENDIENTES
  LISTA_PRO TIPO_PRO;  --AQUI GUARDAREMOS LAS PROPUESTAS PENDIENTES
  LISTA_ART TIPO_ART;  --AQUI GUARDAREMOS LOS ARTICULOS QUE NO HAN SIDO AUN PROCESADOS
  /*DECLARACION DE INDICES*/
  USU BINARY_INTEGER;	--VARIABLE INDICE DE LA LISTA USUARIOS
  PRO BINARY_INTEGER; --VARIABLE INDICE DE LA LISTA PROPUESTAS
  ART BINARY_INTEGER; --VARIABLE INDICE DE LA LISTA ARTICULOS
  /*DECLARACION DE VARIABLES*/
	CONT_USU NUMBER(2); --CONTADOR DE USUARIOS CON PROPUESTAS PENDIENTES
  CONT_PRO NUMBER(2); --CONTADOR DE PROPUESTAS PENDIENTES
  CONT_ART NUMBER(2); --CONTADOR DE ARTICULOS
  PRECIO NUMBER(5,2):=0;  --ACUMULADOR DE PRECIOS POR PROPUESTA
  PRECIO_PRO NUMBER(5,2):=0;  --AQUI GUARDAREMOS EL PRECIO TOTAL DE UNA PROPUESTA SIN IVA
  TOTAL NUMBER(5,2):=0;  --AQUI GUARDAREMOS EL PRECIO TOTAL DE UNA PROPUESTA CON IVA
  TOTAL_PRO NUMBER(5,2):=0;
  COD_PED NUMBER(3):=0;
  IVA PROPUESTA.IVA%TYPE:=0;
  FECHA DATE;
  HAY_ERROR BOOLEAN:=FALSE;
  CODERROR NUMBER(3):=0;
  FECERROR DATE;
  FECPRO DATE;
  

BEGIN  --INICIO BLOQUE ANONIMO
  
  /*  APARTADO 'A'*/
  
  /*CONTEO DEL NUMERO DE USUARIOS
  CON PROPUESTAS PENDIENTES DE 
  PROCESAR*/
                                  
  SELECT COUNT(*) INTO CONT_USU  
  FROM USUARIO WHERE USR IN (SELECT USR FROM PROPUESTA
                              WHERE CODPRO IN (SELECT CODPRO 
                                              FROM ARTPRO 
                                              WHERE PROCESADO=0
                                              GROUP BY CODPRO)
  GROUP BY USR);
  
	IF(CONT_USU>0)THEN --SI HAY ALGUN USUARIO CON PROPUESTAS PENDIENTES
  
   /*RELLENAMOS LA LISTA_USU CON LOS USUARIOS QUE TIENEN PROPUESTAS PENDIENTES*/
		FOR USU IN 1..CONT_USU LOOP  --FOR CARGA USUARIOS
      SELECT USR INTO LISTA_USU(USU)
      FROM	(SELECT ROWNUM AS NUM,USR   
             FROM (SELECT USR FROM PROPUESTA
                                     WHERE CODPRO IN (SELECT CODPRO 
                                                FROM ARTPRO 
                                                WHERE PROCESADO=0
                                                GROUP BY CODPRO)
          GROUP BY USR))
       WHERE NUM=USU;

		END LOOP;--FIN FOR CARGA USUARIOS
    
    /*  FIN APARTADO 'A'   EJERCICIO1 */

    /* INICIO APARTADO 'B' EJERCICIO1 */
    FOR USU IN 1..CONT_USU LOOP  --RECORREMOS FON EL FOR LA LISTA DE USUARIOS
                                 --CON PROPUESTAS PENDIENTES
        HAY_ERROR:=FALSE;
        DBMS_OUTPUT.PUT_LINE('USUARIO: '||LISTA_USU(USU));
        /*SELECCIONAMOS EL NUMERO DE PROPUESTAS PENDIENTES PARA UN USUARIO*/
        
        SELECT COUNT(*) INTO CONT_PRO 
        FROM PROPUESTA WHERE (VALIDADA=0) AND (USR=LISTA_USU(USU));
        
        IF(LISTA_PRO.COUNT>0) THEN
           LISTA_PRO.DELETE;
        END IF;

        /*RELLENAMOS LA ESTRUCTURA DINAMICA DE PROPUESTAS CON LAS PROPUESTAS
        PENDIENTES PARA ESTE USUARIO*/
        FOR PRO IN 1..CONT_PRO LOOP  --CARGAMOS LA LISTA DE PROPUESTAS POR CADA USUARIO
          
          /*INTRODUCIMOS LAS PROPUESTAS SIN PROCESAR EN LA LISTA DE PROPUESTAS*/
           SELECT CODPRO INTO LISTA_PRO(PRO)
           FROM (SELECT ROWNUM AS NUM,CODPRO FROM PROPUESTA
                 WHERE USR=LISTA_USU(USU) AND (VALIDADA=0))
           WHERE NUM=PRO;
           
        END LOOP;--FIN CARGA DE PROPUESTAS
        
          
        FOR PRO IN 1..CONT_PRO LOOP  --FOR RECORRER PROPUESTAS
          /*CONTAMOS EL NUMERO DE ARTICULOS POR CADA PROPUESTA*/  
          DBMS_OUTPUT.PUT_LINE('  PROPUESTA: '||LISTA_PRO(PRO));
          SELECT COUNT(*) INTO CONT_ART
          FROM ARTPRO WHERE CODPRO=LISTA_PRO(PRO) AND PROCESADO=0;
          
          IF (LISTA_ART.COUNT>0) THEN
             LISTA_ART.DELETE;
          END IF;
          
          FOR ART IN 1..CONT_ART LOOP  --CARGAMOS LA LISTA DE ARTICULOS POR CADA PROPUESTA
             SELECT CODART,PRECIO,IVA INTO LISTA_ART(ART).CODART,LISTA_ART(ART).PRECIO,LISTA_ART(ART).IVA
             FROM (SELECT ROWNUM AS NUM,CODART,PRECIO,IVA FROM ARTICULO
                   WHERE CODART IN(SELECT CODART FROM ARTPRO WHERE CODPRO=LISTA_PRO(PRO) AND PROCESADO=0))
             WHERE NUM=ART;

          END LOOP; --FIN FOR CARGA ARTICULOS  
          FOR ART IN 1..CONT_ART LOOP --FOR RECORRE ARTICULOS
            DBMS_OUTPUT.PUT_LINE('    CODART: '||LISTA_ART(ART).CODART||'  '||LISTA_ART(ART).PRECIO);
          
            PRECIO:=PRECIO+LISTA_ART(ART).PRECIO;   --SUMAMOS EL PRECIO DEL ARTICULO AL 
                                                    --ACUMULADOR DE LA PROPUESTA ENTERA
            
          END LOOP; --FIN RECORRER ARTICULOS
            SELECT PRECIO INTO PRECIO_PRO FROM PROPUESTA WHERE CODPRO=LISTA_PRO(PRO);
            SELECT TOTAL INTO TOTAL_PRO FROM PROPUESTA WHERE CODPRO=LISTA_PRO(PRO);
            SELECT IVA INTO IVA FROM PROPUESTA WHERE CODPRO=LISTA_PRO(PRO);
            DBMS_OUTPUT.PUT_LINE('    PRECIO: '||PRECIO);  --VISUALIZAMOS EL PRECIO TOTAL DE 
                                                            --LA PROPUESTA
	 /*FIN DE APARTADO 'B' EJERCICIO 1*/	
  /* INICIO APARTADO C EJERCICIO 1*/	
             UPDATE ARTPRO SET PROCESADO=1 WHERE CODPRO=LISTA_PRO(PRO);
             SELECT SEC_PEDIDO.NEXTVAL INTO COD_PED FROM DUAL;
             SELECT SYSDATE INTO FECHA FROM DUAL;
             COMMIT;
             TOTAL:=PRECIO+IVA;
             INSERT INTO PEDIDO (CODPED,USR,PRECIO,IVA,TOTAL,FECHA,VALIDADA) VALUES 
             (COD_PED,LISTA_USU(USU),PRECIO,IVA,TOTAL,FECHA,0);
             COMMIT;
             DBMS_OUTPUT.PUT_LINE(' *** PEDIDO REALIZADO ***');
             IF(PRECIO=PRECIO_PRO) THEN  --SI LA SUMA DE TODOS LOS PRECIOS COINCIDEN CON EL
                                         --PRECIO DE LA PROPUESTA
               
              
              DBMS_OUTPUT.PUT_LINE('  LOS PRECIOS COINCIDEN PRECIO PROP.: '||PRECIO||' PRECIO+IVA: '||TOTAL);
              
              IF(TOTAL=TOTAL_PRO) THEN --SI COINCIDEN LOS TOTALES
              
                 IF(IVA=(TOTAL-PRECIO)) THEN
                 
                   DBMS_OUTPUT.PUT_LINE('  LOS TOTALES COINCIDEN TOTAL: '||TOTAL||' TOTAL: '||TOTAL_PRO);
                   DBMS_OUTPUT.PUT_LINE(' *** PEDIDO VALIDADO *** ');
                   UPDATE PEDIDO SET VALIDADA=1 WHERE CODPED=COD_PED;
                   UPDATE PROPUESTA SET VALIDADA=1 WHERE CODPRO=LISTA_PRO(PRO);
                 ELSE  --SI NO COINCIDEN LOS IVA
                   DBMS_OUTPUT.PUT_LINE('  LOS IVAS NO COINCIDEN TOTAL: '||IVA||' TOTAL: '||(TOTAL-PRECIO));
                   DBMS_OUTPUT.PUT_LINE('  !!! PEDIDO NO REALIZADO !!! ');
                   HAY_ERROR:=TRUE;
                 END IF;
                 ELSE --SI NO COINCIDEN LOS TOTALES
                   DBMS_OUTPUT.PUT_LINE('  LOS TOTALES NO COINCIDEN TOTAL: '||TOTAL||' TOTAL: '||TOTAL_PRO);
                   DBMS_OUTPUT.PUT_LINE('  !!! PEDIDO NO REALIZADO !!! ');
                   HAY_ERROR:=TRUE;

                 END IF;

               ELSE --SI NO COINCIDEN LOS PRECIOS
                  DBMS_OUTPUT.PUT_LINE('  LOS PRECIOS NO COINCIDEN '||' ('||PRECIO_PRO||')');
                  DBMS_OUTPUT.PUT_LINE('  !!! PEDIDO NO REALIZADO !!! ');
                  HAY_ERROR:=TRUE;
               END IF;
               
               IF(HAY_ERROR=TRUE)THEN
                   SELECT SEC_ERROR.NEXTVAL INTO CODERROR FROM DUAL; 
                   DBMS_OUTPUT.PUT_LINE('ERROR 1');
                   SELECT SYSDATE INTO FECERROR FROM DUAL;
                   SELECT FECHA INTO FECPRO FROM PROPUESTA WHERE CODPRO=LISTA_PRO(PRO);
                   SELECT S1.NEXTVAL INTO COD_PED FROM DUAL; 
                   DBMS_OUTPUT.PUT_LINE('ERROR 2');
                   INSERT INTO ERRORES                    (CODERROR,FECERROR,USR,CODPRO,CANTART,PRECIOTOT,IVA,FECPRO,CODPED,CANTARTPED,PRECIOTOTART,IVAART,FECPED)                   VALUES
(CODERROR,FECERROR,LISTA_USU(USU),LISTA_PRO(PRO),CONT_ART,TOTAL_PRO,IVA,FECPRO,COD_PED,CONT_ART,PRECIO_PRO,IVA,FECERROR);
                   COMMIT;
                   DBMS_OUTPUT.PUT_LINE('ERROR INSERTADO');
                   HAY_ERROR:=FALSE;
                   
               END IF;
               PRECIO:=0;  --PONEMOS EL SUMATORIO DE PRECIO POR CADA PROPUESTA A CERO
               TOTAL:=0;
      END LOOP;--FIN FOR RECORRE PROPUESTAS
    /*FIN DE APARTADO 'C' EJERCICIO 1*/        
     
    END LOOP;  --FIN FOR RECORRE USUARIOS
    --SELECT * FROM PROPUESTA;
    --SELECT * FROM PEDIDO;
    --SELECT * FROM ERRORES;
    --SELECT * FROM ARTPRO;
    
  ELSE
    DBMS_OUTPUT.PUT_LINE('NO HAY USUARIOS CON PROPUESTAS PENDIENTES');
  END IF;
END; --FIN BLOQUE ANONIMO
/
